@page "/categories"
@inject IRepository repository
@inject NavigationManager navigationManager
@inject SweetAlertService sweetAlertService

<h3>Categorias</h3>


@if (Categories is null)
{
    <div class="spinner" />
}
else
{
    <GenericList MyList="Categories">
        <Body>
            <div class="mb-3">
                <a class="btn btn-primary" href="/categories/create">Nuevo País</a>
            </div>
            <table class="table table-striped">
                <thead>
                    <tr>
                        <th></th>
                        <th>Categoria</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var category in Categories!)
                    {
                        <tr>
                            <td>
                                <a href="/categories/edit/@category.Id" class="btn btn-warning">Editar</a>
                                <button class="btn btn-danger" @onclick=@(() => Delete(category))>Borrar</button>
                            </td>
                            <td>
                                @category.Name
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </Body>
    </GenericList>

}

@code {
    public List<Category>? Categories { get; set; }

    protected async override Task OnInitializedAsync()
    {
        await LoadAsync();
    }

    private async Task LoadAsync()
    {
        var responseHppt = await repository.Get<List<Category>>("api/categories");
        Categories = responseHppt.Response!;
    }

    private async Task Delete(Category category)
    {
        var result = await sweetAlertService.FireAsync(new SweetAlertOptions
            {
                Title = "Confirmación",
                Text = "¿Esta seguro que quieres borrar el registro?",
                Icon = SweetAlertIcon.Question,
                ShowCancelButton = true,
                CancelButtonText = "No",
                ConfirmButtonText = "Si",
                FocusCancel = true,
            });

        var confirm = string.IsNullOrEmpty(result.Value);

        if (confirm)
        {
            return;
        }

        var responseHTTP = await repository.Delete($"api/Categories/{category.Id}");

        if (responseHTTP.Error)
        {
            if (responseHTTP.HttpResponseMessage.StatusCode == System.Net.HttpStatusCode.NotFound)
            {
                navigationManager.NavigateTo("/");
            }
            else
            {
                var mensajeError = await responseHTTP.GetErrorMessageAsync();
                await sweetAlertService.FireAsync("Error", mensajeError, SweetAlertIcon.Error);
            }
        }
        else
        {
            await LoadAsync();
        }
    }
}
